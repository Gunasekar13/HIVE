1. Download vechile sales data -> https://github.com/shashank-mishra219/Hive-Class/blob/main/sales_order_data.csv

2. Store raw data into hdfs location
    #make new directory in hdfs location
 
      hadoop fs -mkdir  hdfs://localhost/sales_order_csv
   
    # Copy the file local to hdfs
    
        hadoop fs -put '/config/workspace/.vscode/File_system/sales_order_data.csv' 'hdfs://localhost/sales_order_csv/'
        
    #check file is available in hdfs location
    
        hadoop fs -ls hdfs://localhost/sales_order_csv/
        
3. Create a internal hive table "sales_order_data" which will store csv data sales_order_csv .. make sure to skip header row while creating table
    
hive> create table if not exists sales_order_data
    > (
    > ORDERNUMBER int,
    > QUANTITYORDERED int,
    > PRICEEACH decimal(5,2),
    > ORDERLINENUMBER int,
    > SALES int,
    > STATUS string,
    > QTR_ID int,
    > MONTH_ID int,
    > YEAR_ID int,
    > PRODUCTLINE string,
    > MSRP int,
    > PRODUCTCODE string,
    > PHONE string,
    > CITY string,
    > STATE string,
    > POSTALCODE int,
    > COUNTRY string,
    > TERRITORY string,
    > CONTACTLASTNAME string,
    > CONTACTFIRSTNAME string,
    > DEALSIZE string
    > )
    > row format delimited
    > fields terminated by ','
    > tblproperties("skip.header.line.count"="1")
    > ;
4. Load data from hdfs path into "sales_order_data" table

hive> load data  inpath 'hdfs://localhost/sales_order_csv/sales_order_data.csv' into table sales_order_data;

5. Create an internal hive table which will store data in ORC format "sales_order_orc"
hive> create table if not exists sales_order_orc
    > (
    > ORDERNUMBER int,
    > QUANTITYORDERED int,
    > PRICEEACH decimal(5,2),
    > ORDERLINENUMBER int,
    > SALES int,
    > STATUS string,
    > QTR_ID int,
    > MONTH_ID int,
    > YEAR_ID int,
    > PRODUCTLINE string,
    > MSRP int,
    > PRODUCTCODE string,
    > PHONE string,
    > CITY string,
    > STATE string,
    > POSTALCODE int,
    > COUNTRY string,
    > TERRITORY string,
    > CONTACTLASTNAME string,
    > CONTACTFIRSTNAME string,
    > DEALSIZE string
    > )
    > stored as orc
    > tblproperties("skip.header.line.count"="1")
    > ;

6. Load data from "sales_order_csv" into "sales_order_orc"

hive> insert into table sales_order_orc select *from sales_order_data;

7. Perform below menioned queries on "sales_order_orc" table :

   a. Calculatye total sales per year
   
      hive> select year_id,sum(sales)as total_sales from sales_order_data_orc
          > group by year_id;
          
   b. Find a product for which maximum orders were placed
   
      hive> select QUANTITYORDERED,CITY,STATE,COUNTRY from sales_order_data_orc
          > where QUANTITYORDERED=(select max(QUANTITYORDERED) from sales_order_data_orc);
          
   c. Calculate the total sales for each quarter  
      
      hive> select QTR_ID,YEAR_ID , sum(sales)as total_sales from sales_order_data_orc
          > group by QTR_ID,YEAR_ID;
   
   d. In which quarter sales was minimum
   
       hive> select QTR_ID,year_id,sales from sales_order_data_orc
           > where sales=(select min(sales) from sales_order_data_orc);
           
   e. In which country sales was maximum and in which country sales was minimum
      hive> select country,sales from sales_order_data_orc
          > where sales=(select max(sales) from sales_order_data_orc)
          > union all
          > select country,sales  from sales_order_data_orc
          > where sales=(select min(sales) from sales_order_data_orc);
          
   f. Calculate quartelry sales for each city
   
      hive> select QTR_ID,city,sum(sales)as total_sales  from sales_order_data_orc 
          > group by QTR_ID,city;
          
   h. Find a month for each year in which maximum number of quantities were sold
      hive> with cte as(select MONTH_ID,YEAR_ID,QUANTITYORDERED,
    > rank() over(partition by year_id order by QUANTITYORDERED desc)as max_QUANTITYORDERED
    > from sales_order_data)
    > select MONTH_ID,YEAR_ID,QUANTITYORDERED from cte where max_QUANTITYORDERED=1
    > group by MONTH_ID,YEAR_ID,QUANTITYORDERED;
   
     
     



